{"ast":null,"code":"import axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\";\nimport { USR_REVIEW_URL } from \"../../constants\";\nvar MAX_REVIEW_DISPLAY = 1;\n\nvar getReviewSuccess = function getReviewSuccess(review) {\n  return {\n    type: actionTypes.GET_REVIEW_SUCCESS,\n    review: review\n  };\n};\n\nvar getReviewFail = function getReviewFail(error) {\n  return {\n    type: actionTypes.GET_REVIEW_FAIL,\n    error: error\n  };\n};\n\nvar addReviewSuccess = function addReviewSuccess(data) {\n  return {\n    type: actionTypes.UPDATE_REVIEW_SUCCESS,\n    data: data\n  };\n};\n\nvar addReviewFail = function addReviewFail(error) {\n  return {\n    type: actionTypes.UPDATE_REVIEW_FAIL,\n    error: error\n  };\n};\n\nexport var getReview = function getReview() {\n  return function (dispatch) {\n    axios.get(\"\".concat(USR_REVIEW_URL, \"/reviews\")).then(function (res) {\n      res = res.data;\n      dispatch(getReviewSuccess(res));\n    }).catch(function (err) {\n      dispatch(getReviewFail(err));\n    });\n  };\n};\nexport var getUserReview = function getUserReview(userId) {\n  return function (dispatch) {\n    if (userId === undefined || userId === null) {\n      dispatch(getReviewFail(Error('User UserReviewerence ID must not be empty!')));\n    }\n\n    axios.get(\"\".concat(USR_REVIEW_URL, \"/users/\").concat(userId, \"/reviews\")).then(function (res) {\n      res = res.data;\n      var reviews = [];\n      res.sort(function (a, b) {\n        return b.freq - a.freq;\n      });\n\n      for (var i = 0; i < MAX_REVIEW_DISPLAY; i++) {\n        reviews.push(res[i].review);\n      }\n\n      dispatch(getReviewSuccess(reviews.join(\",\")));\n    }).catch(function (err) {\n      dispatch(getReviewFail(err));\n    });\n  };\n};\nexport var addReview = function addReview(userId, review) {\n  return function (dispatch) {\n    // const prefId = userId;\n    var data = {\n      data: {\n        review: review\n      }\n    };\n    axios.post(\"\".concat(USR_REVIEW_URL, \"/users/\").concat(userId, \"/reviews\"), data).then(function (res) {\n      dispatch(addReviewSuccess(\"done\"));\n      window.location.reload();\n    }).catch(function (err) {\n      return dispatch(addReviewFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/MikeYu/Columbia MSCS/6156 Cloud Computing/LionMatch/src/store/actions/review.js"],"names":["axios","actionTypes","USR_REVIEW_URL","MAX_REVIEW_DISPLAY","getReviewSuccess","review","type","GET_REVIEW_SUCCESS","getReviewFail","error","GET_REVIEW_FAIL","addReviewSuccess","data","UPDATE_REVIEW_SUCCESS","addReviewFail","UPDATE_REVIEW_FAIL","getReview","dispatch","get","then","res","catch","err","getUserReview","userId","undefined","Error","reviews","sort","a","b","freq","i","push","join","addReview","post","window","location","reload"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\";\nimport {USR_REVIEW_URL} from \"../../constants\";\n\n\nconst MAX_REVIEW_DISPLAY = 1\n\nconst getReviewSuccess = (review) => {\n    return {\n        type: actionTypes.GET_REVIEW_SUCCESS,\n        review\n    };\n};\n\n\nconst getReviewFail = (error) => {\n    return {\n        type: actionTypes.GET_REVIEW_FAIL,\n        error\n    };\n};\n\n\nconst addReviewSuccess = (data) => {\n    return {\n        type: actionTypes.UPDATE_REVIEW_SUCCESS,\n        data\n    };\n};\n\n\nconst addReviewFail = (error) => {\n    return {\n        type: actionTypes.UPDATE_REVIEW_FAIL,\n        error\n    };\n};\n\n\nexport const getReview = () => {\n    return dispatch => {\n        axios.get(`${USR_REVIEW_URL}/reviews`)\n            .then(res => {\n            \tres = res.data\n                dispatch(getReviewSuccess(res));\n            })\n            .catch(err => {\n                dispatch(getReviewFail(err));\n            });\n    }\n};\n\nexport const getUserReview = (userId) => {\n    return dispatch => {\n        if (userId === undefined || userId === null) {\n            dispatch(getReviewFail(Error('User UserReviewerence ID must not be empty!')));\n        }\n        axios.get(`${USR_REVIEW_URL}/users/${userId}/reviews`)\n            .then(res => {\n            \tres = res.data\n            \tconst reviews = []\n            \tres.sort((a,b)=> (b.freq - a.freq))\n            \tfor (let i=0;i<MAX_REVIEW_DISPLAY;i++){\n            \t\treviews.push(res[i].review)\n            \t}\n\n                dispatch(getReviewSuccess(reviews.join(\",\")));\n            })\n            .catch(err => {\n                dispatch(getReviewFail(err));\n            });\n    }\n};\n\nexport const addReview = (userId, review) => {\n    return dispatch => {\n        // const prefId = userId;\n        const data = { data: {review: review } };\n        axios.post(`${USR_REVIEW_URL}/users/${userId}/reviews`, data)\n            .then((res) => {\n                dispatch(addReviewSuccess(\"done\"));\n                window.location.reload();\n            })\n            .catch(err => dispatch(addReviewFail(err)));\n    };\n};\n"]},"metadata":{},"sourceType":"module"}