{"ast":null,"code":"import _defineProperty from \"/Users/MikeYu/Columbia MSCS/6156 Cloud Computing/LionMatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/MikeYu/Columbia MSCS/6156 Cloud Computing/LionMatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/MikeYu/Columbia MSCS/6156 Cloud Computing/LionMatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/MikeYu/Columbia MSCS/6156 Cloud Computing/LionMatch/src/containers/TimeSlot.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { Card } from \"./cards\";\nimport { Form } from \"./form\";\nimport { SCHEDULER_URL } from \"../constants\";\nexport var TimePage = function TimePage(props) {\n  var uid = props.match.params.uid;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      time = _useState2[0],\n      setTime = _useState2[1];\n\n  var _useState3 = useState({\n    Id: \"\",\n    Year: \"\",\n    Month: \"\",\n    Day: \"\",\n    StartTime: \"\",\n    EndTime: \"\"\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      addTime = _useState4[0],\n      setAddTime = _useState4[1]; // console.log(uid)\n\n\n  useEffect(function () {\n    // Fetch the list of times API\n    fetch(SCHEDULER_URL + \"/availability/users/\".concat(uid)).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(function (data) {\n      return setTime(data);\n    });\n  }, [uid]);\n\n  var handleFormChange = function handleFormChange(e) {\n    // console.log(e.target.name, e.target.value)\n    setAddTime(_objectSpread(_objectSpread({}, addTime), {}, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var handleFormSubmit = function handleFormSubmit() {\n    if (!addTime.StartTime || !addTime.EndTime) {\n      window.alert('Please select a start hour and an end hour!');\n      return;\n    }\n\n    if (addTime.StartTime > addTime.EndTime) {\n      window.alert('The end hour cannot be earlier than the start hour!');\n      return;\n    } // Creates time suing the API\n\n\n    fetch(SCHEDULER_URL + \"/availability/users/\".concat(uid), {\n      method: \"POST\",\n      body: JSON.stringify({\n        // Id: addTime.Id,\n        Year: addTime.Year,\n        Month: addTime.Month,\n        Day: addTime.Day,\n        StartTime: addTime.StartTime,\n        EndTime: addTime.EndTime\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    }).then(function (response) {\n      setAddTime({\n        Id: \"\",\n        Year: \"\",\n        Month: \"\",\n        Day: \"\",\n        StartTime: \"\",\n        EndTime: \"\"\n      }); // getUpdate();\n\n      window.location.reload();\n    }); // .catch((err) => (console.log(err)));\n  }; // const getUpdate = () => {\n  //     // Automatically update the list as you submit the form\n  //     fetch(SCHEDULER_URL + `/api/availability/users/${uid}`)\n  //         .then((response) => {\n  //             if (response.ok) {\n  //                 return response.json();\n  //             }\n  //         })\n  //         .then((data) => setTime(data));\n  // };\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form, {\n    input: addTime,\n    onFormChange: handleFormChange,\n    onFormSubmit: handleFormSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Card, {\n    listOfTime: time,\n    uid: props.match.params.uid,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/MikeYu/Columbia MSCS/6156 Cloud Computing/LionMatch/src/containers/TimeSlot.js"],"names":["React","useState","useEffect","Card","Form","SCHEDULER_URL","TimePage","props","uid","match","params","time","setTime","Id","Year","Month","Day","StartTime","EndTime","addTime","setAddTime","fetch","then","response","ok","json","data","handleFormChange","e","target","name","value","handleFormSubmit","window","alert","method","body","JSON","stringify","headers","location","reload"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Card } from \"./cards\";\nimport { Form } from \"./form\";\nimport {SCHEDULER_URL} from \"../constants\";\n\nexport const TimePage = (props) => {\n    const uid  = props.match.params.uid;\n    const [time, setTime] = useState([]);\n    const [addTime, setAddTime] = useState({\n        Id:\"\",\n        Year:\"\",\n        Month:\"\",\n        Day:\"\",\n        StartTime:\"\",\n        EndTime:\"\"\n    });\n    // console.log(uid)\n\n    useEffect(() => {\n        // Fetch the list of times API\n        fetch(SCHEDULER_URL + `/availability/users/${uid}`)\n            .then((response) => {\n                if (response.ok) {\n                    return response.json();\n                }\n            })\n            .then((data) => setTime(data));\n    }, [uid]);\n\n    const handleFormChange = (e) => {\n        // console.log(e.target.name, e.target.value)\n        setAddTime({\n            ...addTime,\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    const handleFormSubmit = () => {\n        if (!addTime.StartTime || !addTime.EndTime) {\n            window.alert('Please select a start hour and an end hour!')\n            return;\n        }\n        if (addTime.StartTime > addTime.EndTime) {\n            window.alert('The end hour cannot be earlier than the start hour!')\n            return;\n        }\n        // Creates time suing the API\n        fetch(SCHEDULER_URL + `/availability/users/${uid}`, {\n            method: \"POST\",\n            body: JSON.stringify({\n                // Id: addTime.Id,\n                Year: addTime.Year,\n                Month: addTime.Month,\n                Day: addTime.Day,\n                StartTime: addTime.StartTime,\n                EndTime: addTime.EndTime,\n            }),\n            headers: {\n                \"Content-type\": \"application/json; charset=UTF-8\",\n            },\n        })\n            .then((response) => {\n                setAddTime({\n                    Id:\"\",\n                    Year:\"\",\n                    Month:\"\",\n                    Day:\"\",\n                    StartTime:\"\",\n                    EndTime:\"\"\n                });\n                // getUpdate();\n                window.location.reload();\n            })\n            // .catch((err) => (console.log(err)));\n    };\n\n    // const getUpdate = () => {\n    //     // Automatically update the list as you submit the form\n    //     fetch(SCHEDULER_URL + `/api/availability/users/${uid}`)\n    //         .then((response) => {\n    //             if (response.ok) {\n    //                 return response.json();\n    //             }\n    //         })\n    //         .then((data) => setTime(data));\n    // };\n\n    return (\n        <>\n            <Form\n                input={addTime}\n                onFormChange={handleFormChange}\n                onFormSubmit={handleFormSubmit}\n            />\n            <Card listOfTime={time} uid={props.match.params.uid}/>\n        </>\n    );\n};"]},"metadata":{},"sourceType":"module"}