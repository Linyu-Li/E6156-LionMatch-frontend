{"ast":null,"code":"import axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\";\nimport { USR_PREF_URL } from \"../../constants\";\n\nvar getPrefSuccess = function getPrefSuccess(pref) {\n  return {\n    type: actionTypes.GET_PREF_SUCCESS,\n    pref: pref\n  };\n};\n\nvar getPrefFail = function getPrefFail(error) {\n  return {\n    type: actionTypes.GET_PREF_FAIL,\n    error: error\n  };\n};\n\nvar updatePrefSuccess = function updatePrefSuccess(data) {\n  return {\n    type: actionTypes.UPDATE_PREF_SUCCESS,\n    data: data\n  };\n};\n\nvar updatePrefFail = function updatePrefFail(error) {\n  return {\n    type: actionTypes.UPDATE_PREF_FAIL,\n    error: error\n  };\n};\n\nvar USER_PREF_URL = USR_PREF_URL + '/profile';\nexport var getPref = function getPref(prefId) {\n  return function (dispatch) {\n    if (prefId === undefined || prefId === null) {\n      dispatch(getPrefFail(Error('User preference ID must not be empty!')));\n    }\n\n    axios.get(USER_PREF_URL + \"/\".concat(prefId)).then(function (res) {\n      dispatch(getPrefSuccess(res.data));\n    }).catch(function (err) {\n      dispatch(getPrefFail(err));\n    });\n  };\n};\nexport var updatePref = function updatePref(pref) {\n  return function (dispatch) {\n    var prefId = pref.prefId;\n    var data = {\n      profile: pref\n    };\n\n    if (prefId !== undefined && prefId !== null) {\n      delete data.profile.prefId;\n      axios.put(USER_PREF_URL + \"/\".concat(prefId), data).then(function (res) {\n        dispatch(updatePrefSuccess(res.data));\n      }).catch(function (err) {\n        return dispatch(updatePrefFail(err));\n      });\n    } else {\n      axios.post(USER_PREF_URL, data).then(function (res) {\n        dispatch(updatePrefSuccess(res.data));\n      }).catch(function (err) {\n        return dispatch(updatePrefFail(err));\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/MikeYu/Columbia MSCS/6156 Cloud Computing/LionMatch/src/store/actions/pref.js"],"names":["axios","actionTypes","USR_PREF_URL","getPrefSuccess","pref","type","GET_PREF_SUCCESS","getPrefFail","error","GET_PREF_FAIL","updatePrefSuccess","data","UPDATE_PREF_SUCCESS","updatePrefFail","UPDATE_PREF_FAIL","USER_PREF_URL","getPref","prefId","dispatch","undefined","Error","get","then","res","catch","err","updatePref","profile","put","post"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\";\nimport {USR_PREF_URL} from \"../../constants\";\n\n\nconst getPrefSuccess = (pref) => {\n    return {\n        type: actionTypes.GET_PREF_SUCCESS,\n        pref\n    };\n};\n\n\nconst getPrefFail = (error) => {\n    return {\n        type: actionTypes.GET_PREF_FAIL,\n        error\n    };\n};\n\n\nconst updatePrefSuccess = (data) => {\n    return {\n        type: actionTypes.UPDATE_PREF_SUCCESS,\n        data\n    };\n};\n\n\nconst updatePrefFail = (error) => {\n    return {\n        type: actionTypes.UPDATE_PREF_FAIL,\n        error\n    };\n};\n\n\nconst USER_PREF_URL = USR_PREF_URL + '/profile';\n\nexport const getPref = (prefId) => {\n    return dispatch => {\n        if (prefId === undefined || prefId === null) {\n            dispatch(getPrefFail(Error('User preference ID must not be empty!')));\n        }\n        axios.get(USER_PREF_URL + `/${prefId}`)\n            .then(res => {\n                dispatch(getPrefSuccess(res.data));\n            })\n            .catch(err => {\n                dispatch(getPrefFail(err));\n            });\n    }\n};\n\nexport const updatePref = (pref) => {\n    return dispatch => {\n        const prefId = pref.prefId;\n        const data = { profile: pref };\n        if (prefId !== undefined && prefId !== null) {\n            delete data.profile.prefId;\n            axios.put(USER_PREF_URL + `/${prefId}`, data)\n                .then((res) => {\n                    dispatch(updatePrefSuccess(res.data));\n                })\n                .catch(err => dispatch(updatePrefFail(err)));\n        } else {\n            axios.post(USER_PREF_URL, data)\n                .then((res) => {\n                    dispatch(updatePrefSuccess(res.data));\n                })\n                .catch(err => dispatch(updatePrefFail(err)));\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}